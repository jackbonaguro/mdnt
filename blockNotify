#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const request = require('request');
const bitcoreLibCash = require('bitcore-lib-cash');
const rpcClient = require('bitcoind-rpc');
const mongoose = require('mongoose');

const Block = require('./schema/Block');
const blockHash = process.argv[2]

// Webhook for emails
request.post({
        uri: 'https://maker.ifttt.com/trigger/newblock/with/key/eLSE-nh_zD_CcW6IDrRUziAJvmIfeo5HpSmR-amK3qZ',
        json: {
                value1: blockHash
        }
}, (err) => {
        if (err) {
                console.error(err);
        }
});

const rpc = new rpcClient(process.env.RPCSTRING);

rpc.getBlock(blockHash, (err, newBlock) => {
    const transactions = {};
    for (txid of newBlock.result.tx) {
        transactions[txid] = {};
    }
    Promise.all(Object.keys(transactions).map((txid) => {
        return new Promise((resolve, reject) => {
            rpc.getRawTransaction(txid, (err, rawTx) => {
                if (err) {
                    return reject(err);
                }
                if (!rawTx || !rawTx.result) {
                    return reject(new Error('Failed to getRawTransaction for '+txid));
                }
                transactions[txid].rawTx = rawTx.result;
                return resolve();
            });
        });
    })).then(() => {
        const receivingAddresses = Object.keys(transactions).reduce((acc, txid) => {
            rawTx = transactions[txid].rawTx;
            const tx = new bitcoreLibCash.Transaction(rawTx);
            const newReceivingAddresses = tx.outputs.map((output) => {
                if (output.script.isPublicKeyHashOut()) {
                    return new bitcoreLibCash.Address(output.script.getPublicKeyHash(), 'testnet').toCashAddress();
                } else {
                    return;
                }
            }).filter(o => (o));
            transactions[txid].receivingAddresses = newReceivingAddresses
            return [...acc, ...newReceivingAddresses];
        }, []);

        if (process.env.DEBUG) {
            console.log('New Block');
            console.log('Height: '+newBlock.result.height)
            console.log('Hash: '+blockHash);
            console.log('Transactions:');
            console.log(transactions);
            console.log('Receiving Addresses:');
            console.log(receivingAddresses);
        }

        mongoose.connect('mongodb://127.0.0.1/midnightcash', { useNewUrlParser: true });
        mongoose.connection.on('error', console.error.bind(console, 'MongoDB connection error:'));
        mongoose.connection.on('connected', () => {
            // Publish block to the database
            if (process.env.DEBUG) {
                return mongoose.connection.close();
            }
            new Block({
                height: newBlock.result.height,
                hash: blockHash,
                transactions,
                receivingAddresses
            }).save((err) => {
                if (err) {
                    console.error(err);
                }
                mongoose.connection.close();
            });
        });
    }).catch((err) => {
        console.error(err);
    });
});