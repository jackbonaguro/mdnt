#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const request = require('request');
const bitcoreLibCash = require('bitcore-lib-cash');
const rpcClient = require('bitcoind-rpc');
const mongoose = require('mongoose');

const Block = require('./schema/Block');
const RPCRequest = require('./schema/RPCRequest');

const blockHash = process.argv[2];

// Webhook for emails
request.post({
        uri: 'https://maker.ifttt.com/trigger/newblock/with/key/eLSE-nh_zD_CcW6IDrRUziAJvmIfeo5HpSmR-amK3qZ',
        json: {
                value1: blockHash
        }
}, (err) => {
        if (err) {
                console.error(err);
        }
});

const rpc = new rpcClient(process.env.RPCSTRING);

mongoose.connect('mongodb://127.0.0.1/midnightcash', {
    useNewUrlParser: true,
    useCreateIndex: true,
    useUnifiedTopology: true
});
let db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

// Process New Block is specific to blockNotify, it starts a cascade that ends by notifying users
db.once('open', () => {
    return RPCRequest.create('getBlock', [blockHash], 'processNewBlock', (err) => {
        if (err) {
            console.error(err);
        }
        return db.close();
    });
});